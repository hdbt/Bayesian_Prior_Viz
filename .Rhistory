switch(1, invisible(pi), pi)
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp()
runApp()
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp()
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp()
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp()
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp()
runApp()
runApp()
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp()
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp()
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp()
runApp('handwriting_plotly')
runApp()
runApp('handwriting_plotly')
runApp()
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp()
runApp('handwriting_plotly')
runApp()
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp()
runApp('handwriting_plotly')
runApp()
runApp('handwriting_plotly')
list(100,2,4)
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp()
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp()
runApp('handwriting_plotly')
runApp()
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp()
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
git commit -m "started to add randomization"
git -commit -m "started to add randomization"
git
runApp('handwriting_plotly')
list(a = 100,2,4,8)
list(a = 100,2,4,8)[1]
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
sample(1:2, 2,T)
sample(1:2,1,T)
sample(1:2,1,T)
map(1:3, sample)
map(c(1:3,2), sample)
map(c(1:3,2), sample)
map(c(1:3,2,T), sample)
map(c(1:3,2,T), sample)
session$sendCustomMessage("rhm_click", list(a = 100,2,4,8))
map(c(1:3,2,T), sample)
map(c(1:3,2,T), sample)
map(c(1:3,2,T), sample)
map(c(1:3), sample,1,T)
c(1:3)
map(c(1:3), sample,1,T)
map(c(1:3), sample,1,T)
map(c(1:5), sample,1,T)
map(c(1:5), sample,1,T)
map(c(1:5), sample,1,T)
map(list(2:3,0:1), sample,1,T)
map(list(2:3,0:1), sample,1,T)
map(list(2:3,0:1), sample,1,T)
map(list(2:3,0:1), sample,1,T)
map(list(2:3,0:1), sample,1,T)
map(list(2:3,0:1), sample,1,T)
map(list(2:3,0:1), sample,1,T)
map(list(2:3,0:1), sample,1,T)
runApp('handwriting_plotly')
map(list(10,0,1,0,1,0,1,0.5,1,0,1,3,0.5,0.5,0,1,0,1,2,1,3,1,1), sample,1,T)
map(list(10,0,1,0,1,0,1,0.5,1,0,0.5,0,1,3,0.5,0.5,0,1,0,1,2,1,3,1,1), sample,1,T)
map(list(10,0,1,0,1,0,1,0.5,1,0,1,3,0.5,0.5,0,1,0,1,2,1,3,1,1), sample,1,T)
map(list(10,0,1,0,1,0,1,0.5,1,0.5,0,1,3,0.5,0.5,0,1,0,1,2,1,3,1,1), sample,1,T)
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp()
runApp('handwriting_plotly')
map(list(1000,0,1,0,1,0,1,0.5,1,0.5,0,1,3,0.5,0.5,0,1,0,1,2,1,3,1,1), sample,1,T)
runApp('handwriting_plotly')
runApp()
runApp('handwriting_plotly')
runApp('handwriting_plotly')
map(list(1000,1,2,0,1,0,1,0.5,1,0.5,0,1,3,0.5,0.5,0,1,0,1,2,1,3,1,1), sample,1,T)
sample(list(1000,1,2,0,1,0,1,0.5,1,0.5,0,1,3,0.5,0.5,0,1,0,1,2,1,3,1,1),1,T)
map(list(10,1000), sample,1,T)
map(list(10,1000), sample,x,1,T)
map(list(10,1000), function(x) sample(x,1,replace=T))
sample(10)
params <- map(list(1000,1,2,0,1,0,1,0.5,1,0.5,0,1,3,0.5,0.5,0,1,0,1,2,1,3,1,1), slice_sample,1,T)
params <- map(list(1000,1,2,0,1,0,1,0.5,1,0.5,0,1,3,0.5,0.5,0,1,0,1,2,1,3,1,1), sample.int,1,T)
params <- map(list(1000,1,2,0,1,0,1,0.5,1,0.5,0,1,3,0.5,0.5,0,1,0,1,2,1,3,1,1), sample_frac,1,T)
slice_sample(list(10,100))
slice_sample(list(10))
slice_sample(10)
?sample
sample
sample.int(10,1)
sample.int(10,1)
sample.vec <- function(x, ...) x[sample(length(x), ...)]
params <- map(list(1000,1,2,0,1,0,1,0.5,1,0.5,0,1,3,0.5,0.5,0,1,0,1,2,1,3,1,1), sample.vec,1,T)
map(list(1000,1,2,0,1,0,1,0.5,1,0.5,0,1,3,0.5,0.5,0,1,0,1,2,1,3,1,1), sample.vec,1,T)
runApp('handwriting_plotly')
dCustomInverseChiSquared
dist<-#if(input$distType=='Continuous'){
sample(c(dnorm, dunif, dlnorm, dexp,dgamma, dst,dbeta,dcauchy,dCustomHalfCauchy,dinvgamma,dCustomInverseChiSquared,dlogitnorm),1)
dist<-#if(input$distType=='Continuous'){
sample(c(dnorm, dunif, dlnorm, dexp,dgamma, dst,dbeta,dcauchy,dCustomHalfCauchy,dinvgamma,dCustomInverseChiSquared,dlogitnorm),1)
dist<-#if(input$distType=='Continuous'){
sample(c(dnorm, dunif, dlnorm, dexp,dgamma, dst,dbeta,dcauchy,dCustomHalfCauchy,dinvgamma,dCustomInverseChiSquared,dlogitnorm),1,T)
dist<-#if(input$distType=='Continuous'){
sample(c(dnorm, dunif, dlnorm, dexp,dgamma, dst,dbeta,dcauchy,dCustomHalfCauchy,dinvgamma,dCustomInverseChiSquared,dlogitnorm),1,T)
data <- reactive({
#rewrite to random process ----
print(structure(input$n))
dist<-#if(input$distType=='Continuous'){
sample(c(dnorm, dunif, dlnorm, dexp,dgamma, dst,dbeta,dcauchy,dCustomHalfCauchy,dinvgamma,dCustomInverseChiSquared,dlogitnorm),1,T)
# switch(input$dist,
#        Normal = dnorm,
#        Uniform = dunif,
#        LogNormal = dlnorm,
#        Exponential = dexp,
#        Gamma=dgamma,
#        t = dst,
#        Beta=dbeta,
#        Cauchy=dcauchy,
#        HalfCauchy=dCustomHalfCauchy,
#        InverseGamma=dinvgamma,
#        InverseChiSquared=dCustomInverseChiSquared,
#        LogitNormal=dlogitnorm,
#        dnorm)
#}
#
#   else if (input$distType=='Discrete'){
#   switch(input$dist1,
#          Bernoulli=dbern,
#          BetaBinomial=dCustomBetaBinomial,
#          Binomial=dbinom,
#          DiscreteUniform=dunifdisc,
#          Poisson=dpois,
#          NegativeBinomial=dnbinom,
#          dbern)
# } else if (input$distType=='Multivariate'){
#   switch(input$dist2,
#          MultivariateNormal=dmvnorm,
#          MultivarateT=dmvt,
#          dmvnorm)
# }
})
sample(c(dnorm,dunif))
sample(c(dnorm,dunif),1,T)
dCustomInverseChiSquared
dlogitnorm
c(dnorm, dunif, dlnorm, dexp,dgamma, dst,dbeta,dcauchy,dCustomHalfCauchy,dinvgamma,dCustomInverseChiSquared,dlogitnorm)
c(dnorm, dunif, dlnorm, dexp,dgamma, dst,dbeta,dcauchy,dCustomHalfCauchy,dinvgamma,dCustomInverseChiSquared,dlogitnorm)
c(dnorm, dunif, dlnorm, dexp,dgamma, dst,dbeta,dcauchy,dCustomHalfCauchy,dinvgamma,dCustomInverseChiSquared,dlogitnorm)
dist<-#if(input$distType=='Continuous'){
sample(c(dnorm, dunif, dlnorm, dexp,dgamma, dst,dbeta,dcauchy,dCustomHalfCauchy,dinvgamma,dCustomInverseChiSquared,dlogitnorm),1,T)
sample(c(dnorm, dunif, dlnorm, dexp,dgamma, dst,dbeta,dcauchy,dCustomHalfCauchy,dinvgamma,dCustomInverseChiSquared,dlogitnorm),1,T)
sample(c(dnorm, dunif, dlnorm, dexp,dgamma, dst,dbeta,dcauchy,dCustomHalfCauchy,dinvgamma,dCustomInverseChiSquared,dlogitnorm),1,T)
sample(c(dnorm, dunif, dlnorm, dexp,dgamma, dst,dbeta,dcauchy,dCustomHalfCauchy,dinvgamma,dCustomInverseChiSquared,dlogitnorm),1,T)
runApp('handwriting_plotly')
runApp()
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp()
runApp('handwriting_plotly')
runApp()
sample(dst,dnorm)
dist<-#if(input$distType=='Continuous'){
sample(c(dst,dnorm))
runApp('handwriting_plotly')
runApp()
runApp('handwriting_plotly')
runApp()
runApp('handwriting_plotly')
runApp()
runApp('handwriting_plotly')
runApp('handwriting_plotly')
as.symbol(dnorm)
typeof(dnorm)
typeof(dnorm())
list(dnorm)
typeof(list(dnorm)[1])
typeof(list(dnorm)[1][1])
dist<-#if(input$distType=='Continuous'){
dnorm
dist
list(dnorm)
list(dnorm)[[1]]
dist<-#if(input$distType=='Continuous'){
list(dnorm)[[1]]
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp()
runApp('handwriting_plotly')
runApp()
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp()
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp()
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
dist
name(dist)
names(dist)
str(dist)
structure(dist)
dist_vec <- c(Normal, Uniform, Lognormal, Exponential, Gamma, t, Beta, Cauchy, HalfCauchy, InverseGamma, InverseChiSquared, LogitNormal, Normal)
dist_vec <- c("Normal", "Uniform", "Lognormal", "Exponential", "Gamma", "t", "Beta", "Cauchy", "HalfCauchy", "InverseGamma", "InverseChiSquared", "LogitNormal", "Normal")
dist_vec_sampled <- dist_vec[[sample(length(dist_vec),1,T)]]
switch(dist_vec, Normal = dnorm,
Uniform = dunif,
LogNormal = dlnorm,
Exponential = dexp,
Gamma=dgamma,
t = dst,
Beta=dbeta,
Cauchy=dcauchy,
HalfCauchy=dCustomHalfCauchy,
InverseGamma=dinvgamma,
InverseChiSquared=dCustomInverseChiSquared,
LogitNormal=dlogitnorm,
dnorm)
dist_vec
dist_vec_sampled
dist_vec_sampled <- dist_vec[[sample(length(dist_vec),1,T)]]
dist_vec_sampled
switch(dist_vec, Normal = dnorm,
Uniform = dunif,
LogNormal = dlnorm,
Exponential = dexp,
Gamma=dgamma,
t = dst,
Beta=dbeta,
Cauchy=dcauchy,
HalfCauchy=dCustomHalfCauchy,
InverseGamma=dinvgamma,
InverseChiSquared=dCustomInverseChiSquared,
LogitNormal=dlogitnorm,
dnorm)
switch(dist_vec_sampled, Normal = dnorm,
Uniform = dunif,
LogNormal = dlnorm,
Exponential = dexp,
Gamma=dgamma,
t = dst,
Beta=dbeta,
Cauchy=dcauchy,
HalfCauchy=dCustomHalfCauchy,
InverseGamma=dinvgamma,
InverseChiSquared=dCustomInverseChiSquared,
LogitNormal=dlogitnorm,
dnorm)
runApp('handwriting_plotly')
dist
dist <- switch(dist_vec_sampled, Normal = dnorm,
Uniform = dunif,
LogNormal = dlnorm,
Exponential = dexp,
Gamma=dgamma,
t = dst,
Beta=dbeta,
Cauchy=dcauchy,
HalfCauchy=dCustomHalfCauchy,
InverseGamma=dinvgamma,
InverseChiSquared=dCustomInverseChiSquared,
LogitNormal=dlogitnorm,
dnorm)
dist
dist_vec_sampled
runApp('handwriting_plotly')
runApp('handwriting_plotly')
git commit -m "random graph displayed now"
git push
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp()
runApp('handwriting_plotly')
dbeta
runApp('handwriting_plotly')
runApp()
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp()
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp()
runApp('handwriting_plotly')
runApp()
runApp('handwriting_plotly')
runApp()
runApp('handwriting_plotly')
runApp()
runApp('handwriting_plotly')
fCalculateMean()
fCalculateMean()
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
map(list(1000,1,2,0,1,0,1,0.5,1,0.5,0,1,3,0.5,0.5,0,1,0,1,2,1,3,1,1), sample.vec,1,T)
map(list(1000,1,2,0,1,0,1,0.5,1,0.5,0,1,3,0.5,0.5,0,1,0,1,2,1,3,1,1), sample.vec,1,T)
map(list(1000,1,2,0,1,0,1,0.5,1,0.5,0,1,3,0.5,0.5,0,1,0,1,2,1,3,1,1), sample.vec,1,T)
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
dist_vec_sampled <- dist_vec[[sample(length(dist_vec),1,T)]]
dist_vec_sampled
dist <- switch(dist_vec_sampled, Normal = dnorm,
Uniform = dunif,
LogNormal = dlnorm,
Exponential = dexp,
Gamma=dgamma,
t = dst,
Beta=dbeta,
Cauchy=dcauchy,
HalfCauchy=dCustomHalfCauchy,
InverseGamma=dinvgamma,
InverseChiSquared=dCustomInverseChiSquared,
LogitNormal=dlogitnorm,
dnorm)
dist
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
dist_list[[sample(length(dist_list),1,T)]]
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
runApp('handwriting_plotly')
library(dplyr)
runApp('handwriting_plotly')
runApp('handwriting_plotly')
setwd("/srv/shiny-server/Bayesian_Prior_Viz")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
fScale
fScaleFull()
fScaleFull
runApp('~/handwriting_plotly/distribution-zoo/App-1')
pbinom
fScale1
?extendShinyjs
HTML("<span>
<button id='save'>Save</button>
<button id='clear'>Clear</button>
<span class'slidecontainer', style= 'width:10%'>
<input type='range' min='0.1' max='100' value='0.5' class='slider' id='myRange'></span>
</span><span>Value: <span id='demo'></span></span>")
runApp()
uiiut?uiOutput()
uiOutput('mytabs', class = "container-fluid" )
1ü1
1+1
runApp()
1+1
tags$head(tags$script("let counter = 0
function count() {
counter ++;
document.getElementById(demo').innerHTML= counter;}"))
tags$script("let counter = 0
function count() {
counter ++;
document.getElementById(demo').innerHTML= counter;}")
clf <- model_image_classifier(max_trials = 1) %>%
#fit(keras::k_reshape(x_train,list(10,10)), keras::k_reshape(y_train,list(10,10)),epochs=1)
fit(x_train,y_train,epochs=1)
# -------------------- neuer Versuch keras --------------
library(pacman)
p_load(tidyverse, keras, tensorflow, reticulate)
label_list <- dir("train/")
output_n <- length(label_list)
save(label_list, file="label_list.R")
path_train <- "train/"
# image size to scale down to (original images are 100 x 100 px)
img_width <- 10
img_height <- 10
target_size <- c(img_width, img_height)
# RGB = 3 channels
channels <- 3
train_data_gen <- image_data_generator(rescale = 1/255,
validation_split = .2)
# training images
train_image_array_gen  <- flow_images_from_directory(path_train,
train_data_gen,
subset = 'training',
#target_size = target_size,
class_mode = "categorical",
shuffle=F,
classes = label_list,
seed = 2021)
# validation images
valid_image_array_gen  <- flow_images_from_directory(path_train,
train_data_gen,
subset = 'validation',
target_size = target_size,
class_mode = "categorical",
classes = label_list,
seed = 2021)
# define batch size and number of epochs
batch_size <- 32
epochs <- 10
x_train <- train_image_array_gen
y_train <- valid_image_array_gen
library(autokeras)
clf <- model_image_classifier(max_trials = 1) %>%
#fit(keras::k_reshape(x_train,list(10,10)), keras::k_reshape(y_train,list(10,10)),epochs=1)
fit(x_train,y_train,epochs=1)
clf <- model_image_classifier(max_trials = 1) %>%
#fit(keras::k_reshape(x_train,list(10,10)), keras::k_reshape(y_train,list(10,10)),epochs=1)
fit(x_train,epochs=1)
reticulate::repl_python()
library(dplyr)
getwd()
reticulate::repl_python()
getwd()
reticulate::repl_python()
